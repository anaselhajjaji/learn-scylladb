version: '3'

services:
  app:
    # Using a Dockerfile is optional, but included for completeness.
    build: 
      context: .
      dockerfile: Dockerfile
      # [Optional] You can use build args to set options. e.g. 'VARIANT' below affects the image in the Dockerfile
      args:
        # Update the VARIANT arg to pick a version of Go: 1, 1.18, 1.17
        # Append -bullseye or -buster to pin to an OS version.
        # Use -bullseye variants on local arm64/Apple Silicon.
        VARIANT: 1-bullseye
        # Options
        NODE_VERSION: lts/*

    volumes:
      # This is where VS Code should expect to find your project's source code and the value of "workspaceFolder" in .devcontainer/devcontainer.json
      - ..:/workspace:cached

      # Uncomment the next line to use Docker from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker-compose for details.
      # - /var/run/docker.sock:/var/run/docker.sock 

    # Overrides default command so things don't shut down after the process ends.
    command: /bin/sh -c "while sleep 1000; do :; done"  

    # Runs app on the same network as the service container, allows "forwardPorts" in devcontainer.json function.
    #network_mode: service:another-service
    networks:
      scyllanet:
    
    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally. 
    # (Adding the "ports" property to this file will not forward from a Codespace.)

    # Uncomment the next line to use a non-root user for all processes - See https://aka.ms/vscode-remote/containers/non-root for details.
    user: vscode

    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    cap_add:
       - SYS_PTRACE
    security_opt:
       - seccomp:unconfined
    
  # You can include other services not opened by VS Code as well
  scylla1:
    image: scylladb/scylla
    restart: unless-stopped
    container_name: scylla-node1
    command: --seeds=scylla-node1,scylla-node2 --smp 1 --memory 750M --overprovisioned 1 --api-address 0.0.0.0
    volumes:
      - "./scylla/scylla.yaml:/etc/scylla/scylla.yaml"
      - "./scylla/cassandra-rackdc.properties.dc1:/etc/scylla/cassandra-rackdc.properties"
      - "./scylla/scylla-data.txt:/scylla-data.txt"
    networks:
      scyllanet:

  scylla2:
    image: scylladb/scylla
    restart: unless-stopped
    container_name: scylla-node2
    command: --seeds=scylla-node1,scylla-node2 --smp 1 --memory 750M --overprovisioned 1 --api-address 0.0.0.0
    volumes:
      - "./scylla/scylla.yaml:/etc/scylla/scylla.yaml"
      - "./scylla/cassandra-rackdc.properties.dc1:/etc/scylla/cassandra-rackdc.properties"
    networks:
      scyllanet:

  scylla3:
    image: scylladb/scylla
    restart: unless-stopped
    container_name: scylla-node3
    command: --seeds=scylla-node1,scylla-node2 --smp 1 --memory 750M --overprovisioned 1 --api-address 0.0.0.0
    volumes:
      - "./scylla/scylla.yaml:/etc/scylla/scylla.yaml"
      - "./scylla/cassandra-rackdc.properties.dc1:/etc/scylla/cassandra-rackdc.properties"
    networks:
      scyllanet:

  # monitoring
  alertmanager:
    container_name: aalert
    image: prom/alertmanager:v0.21.0
    ports:
      - 9093:9093
    volumes:
      - ./prometheus/rule_config.yml:/etc/alertmanager/config.yml
    networks:
      scyllanet:

  grafana:
    container_name: agraf
    environment:
      - GF_PANELS_DISABLE_SANITIZE_HTML=true
      - GF_PATHS_PROVISIONING=/var/lib/grafana/provisioning
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=scylladb-scylla-datasource
      # This is where you set Grafana security
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    image: grafana/grafana:7.3.5
    ports:
      - 3000:3000
    user: 1000:1000
    volumes:
      - ./grafana/build:/var/lib/grafana/dashboards
      - ./grafana/plugins:/var/lib/grafana/plugins
      - ./grafana/provisioning:/var/lib/grafana/provisioning
      # Uncomment the following line for grafana persistency
      # - path/to/grafana/dir:/var/lib/grafana
    networks:
      scyllanet:

  loki:
    command:
      - --config.file=/mnt/config/loki-config.yaml
    container_name: loki
    image: grafana/loki:2.0.0
    ports:
      - 3100:3100
    volumes:
      - ./loki/rules:/etc/loki/rules
      - ./loki/conf:/mnt/config
    networks:
      scyllanet:

  promotheus:
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    container_name: aprom
    image: prom/prometheus:v2.18.1
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/prom_rules/prometheus.rules.yml:/etc/prometheus/prometheus.rules.yml
      - ./prometheus/scylla_servers.yml:/etc/scylla.d/prometheus/scylla_servers.yml
      # I dont have scylla manager
      #- ./prometheus/scylla_manager_servers.yml:/etc/scylla.d/prometheus/scylla_manager_servers.yml
      - ./prometheus/scylla_servers.yml:/etc/scylla.d/prometheus/node_exporter_servers.yml
      # Uncomment the following line for prometheus persistency 
      # - path/to/data/dir:/prometheus/data
    networks:
      scyllanet:

  promtail:
    command:
      - --config.file=/etc/promtail/config.yml
    container_name: promtail
    image: grafana/promtail:2.0.0
    ports:
      - 1514:1514
      - 9080:9080
    volumes:
      - ./loki/promtail/promtail_config.compose.yml:/etc/promtail/config.yml
    networks:
      scyllanet:

    # As in the "app" service, use "forwardPorts" in **devcontainer.json** to forward an app port locally.
networks:
  scyllanet:
    driver: bridge